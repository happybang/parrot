/* eslint-disable */
// This file is auto generated by parrot at {{ date }}, Do Not Modify it.
import axios, { AxiosRequestConfig, AxiosResponse } from 'axios'

const client = axios.create({ baseURL : "{{ basePath }}" });

const parseUriTemplate = (
  url?: string,
  path?: { [key: string]: any }
) => {
  if (url === undefined || path === undefined) return url;
  return url.replace(/{(\w+)}/g, (_raw, key) => 
    encodeURIComponent(path[key] || '')
  );
}

export interface RequestConfig extends AxiosRequestConfig {
  path?: any,
  formData?: any
} 

const request = <R>(config: RequestConfig) => {
  const { formData } = config
  if (formData instanceof FormData) {
    config.data = config.formData
  } else if (formData) {
    config.data = new FormData()
    for (const key of Object.keys(formData)) {
      config.data.append(key, formData[key])
    }
  }
  return client
    .request<any, AxiosResponse<R>>({
      ...config,
      url: parseUriTemplate(config.url, config.path)
    })
    .then(ret => ret.data)
}


{%- for class in classes %}
{{ class }}
{%- endfor -%}
